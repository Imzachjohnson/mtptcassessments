[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "geojson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "geojson",
        "description": "geojson",
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "MultiPoint",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "Feature",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "FeatureCollection",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "json_util",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "Attachment",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Attachment(BaseModel):\n    download_url: str\n    download_large_url: str\n    download_medium_url: str\n    download_small_url: str\n    mimetype: str\n    filename: str\n    instance: int\n    xform: int\nclass EnqDetailleGroupNiveau(BaseModel):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "EnqDetailleGroupNiveau",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class EnqDetailleGroupNiveau(BaseModel):\n    photo: str = Field(\n        None, alias=\"enq_detaille/group_niveau/group_fo3pt80/Photo_du_plan_du_batiment\"\n    )\nclass Assessment(BaseModel):\n    id: str = Field(None, alias=\"_id\")\n    username: str = None\n    attachments: List[Attachment] = Field(None, alias=\"_attachments\")\n    status: str = None\n    geolocation: List[Any] = Field(None, alias=\"_geolocation\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Assessment",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class Assessment(BaseModel):\n    id: str = Field(None, alias=\"_id\")\n    username: str = None\n    attachments: List[Attachment] = Field(None, alias=\"_attachments\")\n    status: str = None\n    geolocation: List[Any] = Field(None, alias=\"_geolocation\")\n    tags: List[Any] = None\n    notes: List[Any] = None\n    submitted_by: str = None\n    plan_photo: List[EnqDetailleGroupNiveau] = Field(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "AssessmentList",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class AssessmentList(BaseModel):\n    assessments: Optional[List[Assessment]]\napp = FastAPI(\n    title=\"Miyamoto MTPTC Assessments\",\n    version=\"0.0.1\",\n)\nAPI_URL = \"https://kc.humanitarianresponse.info/api/v1/data/\"\nMEDIA_API_URL = \"https://kc.humanitarianresponse.info/api/v1/media/\"\nFORM_ID = \"894190\"\ndef convertogeojson(received_assessments: AssessmentList):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "parse_json",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def parse_json(data):\n    return json.loads(json_util.dumps(data))\nclass Attachment(BaseModel):\n    download_url: str\n    download_large_url: str\n    download_medium_url: str\n    download_small_url: str\n    mimetype: str\n    filename: str\n    instance: int",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "convertogeojson",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def convertogeojson(received_assessments: AssessmentList):\n    data = []\n    for assessment in received_assessments.assessments:\n        properties_temp = {\n            \"id\": assessment.id,\n        }\n        if assessment.geolocation[0] and assessment.geolocation[1]:\n            image: str = \"\"\n            all_images = []\n            try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "conversingletogeojson",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def conversingletogeojson(assessment: Assessment):\n    data = []\n    properties_temp = {\n        \"id\": assessment.id,\n    }\n    if assessment.geolocation[0] and assessment.geolocation[1]:\n        image: str = \"\"\n        all_images = []\n        try:\n            for attachment in assessment.attachments:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "all_data_request",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def all_data_request(api_key, start, limit):\n    request_data = {\"Authorization\": \"Token \" + api_key}\n    r = requests.get(\n        url=API_URL + FORM_ID + f\"?start={start}&limit={limit}\",\n        headers={\"Authorization\": \"Token \" + api_key},\n        timeout=800,\n    )\n    response = r.json()\n    built_assessment = AssessmentList(assessments=response)\n    return built_assessment",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "all_data_request_no_pydantic",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def all_data_request_no_pydantic(api_key, start, limit):\n    request_data = {\"Authorization\": \"Token \" + api_key}\n    r = requests.get(\n        url=API_URL + FORM_ID + f\"?start={start}&limit={limit}\",\n        headers={\"Authorization\": \"Token \" + api_key},\n        timeout=800,\n    )\n    response = r.json()\n    for r in response:\n        for k, l in list(r.items()):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "single_assessment_request",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def single_assessment_request(api_key, assessment):\n    request_data = {\"Authorization\": \"Token \" + api_key}\n    r = requests.get(\n        url=API_URL + FORM_ID + \"/\" + assessment,\n        headers={\"Authorization\": \"Token \" + api_key},\n    )\n    response = r.json()\n    built_assessment = Assessment.build(r.json())\n    return built_assessment\n@app.get(\"/geojson/{api_key}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "myclient",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "myclient = MongoClient(\n    \"mongodb+srv://zjohnson:Coopalex0912@cluster0.2amvb.mongodb.net/mtptcmiyamoto?retryWrites=true&w=majority\"\n)\n# database\ndb = myclient[\"mtptcmiyamoto\"]\n# Created or Switched to collection\ncollection = db[\"assessments\"]\ndef parse_json(data):\n    return json.loads(json_util.dumps(data))\nclass Attachment(BaseModel):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "db = myclient[\"mtptcmiyamoto\"]\n# Created or Switched to collection\ncollection = db[\"assessments\"]\ndef parse_json(data):\n    return json.loads(json_util.dumps(data))\nclass Attachment(BaseModel):\n    download_url: str\n    download_large_url: str\n    download_medium_url: str\n    download_small_url: str",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "collection",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "collection = db[\"assessments\"]\ndef parse_json(data):\n    return json.loads(json_util.dumps(data))\nclass Attachment(BaseModel):\n    download_url: str\n    download_large_url: str\n    download_medium_url: str\n    download_small_url: str\n    mimetype: str\n    filename: str",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=\"Miyamoto MTPTC Assessments\",\n    version=\"0.0.1\",\n)\nAPI_URL = \"https://kc.humanitarianresponse.info/api/v1/data/\"\nMEDIA_API_URL = \"https://kc.humanitarianresponse.info/api/v1/media/\"\nFORM_ID = \"894190\"\ndef convertogeojson(received_assessments: AssessmentList):\n    data = []\n    for assessment in received_assessments.assessments:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "API_URL = \"https://kc.humanitarianresponse.info/api/v1/data/\"\nMEDIA_API_URL = \"https://kc.humanitarianresponse.info/api/v1/media/\"\nFORM_ID = \"894190\"\ndef convertogeojson(received_assessments: AssessmentList):\n    data = []\n    for assessment in received_assessments.assessments:\n        properties_temp = {\n            \"id\": assessment.id,\n        }\n        if assessment.geolocation[0] and assessment.geolocation[1]:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MEDIA_API_URL",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "MEDIA_API_URL = \"https://kc.humanitarianresponse.info/api/v1/media/\"\nFORM_ID = \"894190\"\ndef convertogeojson(received_assessments: AssessmentList):\n    data = []\n    for assessment in received_assessments.assessments:\n        properties_temp = {\n            \"id\": assessment.id,\n        }\n        if assessment.geolocation[0] and assessment.geolocation[1]:\n            image: str = \"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FORM_ID",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FORM_ID = \"894190\"\ndef convertogeojson(received_assessments: AssessmentList):\n    data = []\n    for assessment in received_assessments.assessments:\n        properties_temp = {\n            \"id\": assessment.id,\n        }\n        if assessment.geolocation[0] and assessment.geolocation[1]:\n            image: str = \"\"\n            all_images = []",
        "detail": "main",
        "documentation": {}
    }
]